// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, GithubEventEmitter, https, querystring,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  querystring = require('querystring');

  https = require('https');

  GithubEventEmitter = (function(_super) {
    __extends(GithubEventEmitter, _super);

    function GithubEventEmitter() {
      this.receiveAccessToken = __bind(this.receiveAccessToken, this);
      this.requestToken = __bind(this.requestToken, this);
      this.on('requestToken', this.requestToken);
      this.on('receiveAccessToken', this.receiveAccessToken);
    }


    /*
    exampleComplete: (access_token, user_data) ->
      db.sadd GITHUB_TOKEN_SET, access_token
      db.hset GITHUB_AUTH_HASH, access_token, user_data
     */

    GithubEventEmitter.prototype.requestToken = function(req, res, cb) {
      var ghpost, options, post_data;
      post_data = querystring.stringify({
        code: req.query.code,
        client_id: process.env.GITHUB_CLIENT_ID,
        client_secret: process.env.GITHUB_CLIENT_SECRET
      });
      options = {
        method: 'POST',
        host: 'github.com',
        path: '/login/oauth/access_token',
        headers: {
          "User-Agent": "skyl/express-oauth",
          "Accept": "application/json"
        }
      };
      ghpost = https.request(options, cb);
      ghpost.write(post_data);
      return ghpost.end();
    };

    GithubEventEmitter.prototype.receiveAccessToken = function(req, str, cb) {
      var access_token, o, options, self, user_req;
      o = {};
      o.data = JSON.parse(str);
      o.status = "success";
      o.state = req.query.state;
      o.provider = "github";
      access_token = o.data.access_token;
      options = {
        host: 'api.github.com',
        path: "/user?access_token=" + access_token,
        headers: {
          "User-Agent": "skyl/express-oauth"
        }
      };
      self = this;
      user_req = https.request(options, function(gh_response) {
        var user_data;
        user_data = '';
        gh_response.on('data', function(chunk) {
          return user_data += chunk;
        });
        return gh_response.on('end', function() {
          o.user_data = JSON.parse(user_data);
          self.emit("complete", o);
          return cb(o);
        });
      });
      return user_req.end();
    };

    return GithubEventEmitter;

  })(EventEmitter);

  module.exports.GithubEventEmitter = new GithubEventEmitter;

}).call(this);
