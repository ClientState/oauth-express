// Generated by CoffeeScript 1.8.0
(function() {
  var EVENT_EMITTERS, EventEmitter, MockGithub, MockResponse, app, assert, auth_callback, auth_provider_redirect, request, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  EventEmitter = require("events").EventEmitter;

  request = require("supertest");

  app = require("express")();

  assert = require("chai").assert;

  MockResponse = (function(_super) {
    __extends(MockResponse, _super);

    function MockResponse(statusCode, body) {
      var self;
      this.statusCode = statusCode;
      self = this;
      setTimeout(function() {
        self.emit("data", body);
        return self.emit("end");
      }, 1);
    }

    return MockResponse;

  })(EventEmitter);

  MockGithub = (function(_super) {
    __extends(MockGithub, _super);

    function MockGithub() {
      this.receiveAccessToken = __bind(this.receiveAccessToken, this);
      this.requestToken = __bind(this.requestToken, this);
      this.eventListeners = {};
      this.emitCounts = {};
      this.on('requestToken', this.requestToken);
      this.on('receiveAccessToken', this.receiveAccessToken);
      this.on('complete', this.onComplete);
    }

    MockGithub.prototype.onComplete = function(object) {
      var _base;
      if ((_base = this.emitCounts)['complete'] == null) {
        _base['complete'] = 0;
      }
      return this.emitCounts['complete']++;
    };

    MockGithub.prototype.requestToken = function(req, res, cb) {
      var _base;
      if ((_base = this.emitCounts)['requestToken'] == null) {
        _base['requestToken'] = 0;
      }
      this.emitCounts['requestToken']++;
      return cb(new MockResponse(200, '{"access_token": "boom"}'));
    };

    MockGithub.prototype.receiveAccessToken = function(req, str, cb) {
      var _base;
      if ((_base = this.emitCounts)['receiveAccessToken'] == null) {
        _base['receiveAccessToken'] = 0;
      }
      this.emitCounts['receiveAccessToken']++;
      this.emit("complete", {
        "access_token": "boom"
      });
      return cb('{}');
    };

    return MockGithub;

  })(EventEmitter);

  EVENT_EMITTERS = require("../config").EVENT_EMITTERS;

  EVENT_EMITTERS.github = new MockGithub;

  _ref = require("../handlers"), auth_provider_redirect = _ref.auth_provider_redirect, auth_callback = _ref.auth_callback;

  app.get('/auth/:provider', auth_provider_redirect);

  app.get('/auth_callback/:provider', auth_callback);

  describe('Github redirect redirects', function() {
    return it("puts the github redirect on it's skin", function(done) {
      return request(app).get('/auth/github?opts={"state": "foobar"}').expect(302).end(function(err, res) {
        assert.ok(res.headers.location.indexOf("github.com") > -1);
        return done();
      });
    });
  });

  describe('get Emits events or else', function() {
    return it('gets the hose again', function(done) {
      return request(app).get('/auth_callback/github').expect(200).end(function(err, res) {
        var ec;
        ec = EVENT_EMITTERS.github.emitCounts;
        assert.ok(ec.requestToken === 1);
        assert.ok(ec.receiveAccessToken === 1);
        assert.ok(ec.complete === 1);
        return done();
      });
    });
  });

}).call(this);
